% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cleanup.R
\name{cleanup_times}
\alias{cleanup_times}
\alias{cleanup_events}
\alias{cleanup_timesteps}
\title{Cleaning up data}
\usage{
cleanup_times(
  populations,
  are.events,
  timestep = 1,
  end.time = max(populations$time),
  times = seq(from = min(populations$time), to = end.time, by = timestep)
)

cleanup_events(populations, ...)

cleanup_timesteps(populations, ...)
}
\arguments{
\item{populations}{- a data frame with columns corresponding to different
population segments and a 'time' column}

\item{are.events}{- whether the times in the data frame are events
(therefore should take last event to determine state) or not
(therefore interpolate)}

\item{timestep}{- (optionally) timestep required for times - default 1}

\item{end.time}{- (optionally) end of simulation time required - default
\code{max(populations$time)}}

\item{times}{- (optionally) vector of times to be reproduced - default
\code{seq(from=min(populations$time), to=end.time, by=timestep)}}

\item{...}{- pass through arguments for \code{cleanup_events()} and
\code{cleanup_timesteps()} to \code{cleanup_times()}}
}
\value{
Revised data frame with correct timings
}
\description{
Cleanup times in population data frame, so that they are regularly
spaced and stop at the correct time, using either means to
interpolate new data points or previous value for events. We assume
when the data frame stops before end.time that the state then
remaining unchanged.
}
\details{
\code{cleanup_events()} cleans up times of an event-based population data
frame, \code{cleanup_timesteps()} cleans up times of an timestep-based
population data frame.
}
\examples{

growth <- function(latest.df, growth.rate) {
current.count <- latest.df$count
growth.num <- current.count * growth.rate
next.count <- current.count + growth.num
next.time <- latest.df$time + 1
new.df <- data.frame(time=next.time, count=next.count)
finished <- next.count == 0
list(updated.pop=new.df, end.experiment=finished)
}
df <- data.frame(time=0, count=1)
results <- run_simulation(growth, df, 100, growth.rate=0.1)
plot_populations(results)
short.results <- cleanup_timesteps(results, timestep=20, end.time=80)
plot_populations(short.results, new.graph=FALSE, lty=2)

}
