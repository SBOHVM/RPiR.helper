% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/run_simulation.R
\name{run_simulation}
\alias{run_simulation}
\title{Run a simulation loop}
\usage{
run_simulation(step_function, initial.pop, end.time, debug = FALSE, ...)
}
\arguments{
\item{step_function}{Function to run a timestep (\code{step_function()})
which returns a list containing elements \code{updated.pop} with the
updated population and \code{end.experiment} which is TRUE if the
experiment has ended (FALSE if not), OR which just returns a data frame
with the updated population}

\item{initial.pop}{Initial population data frame with columns corresponding
to function requirements. This *must* include a \code{time} column so that
\code{run_simple()} can check whether the \code{end.time} has been reached.}

\item{end.time}{End time of simulation}

\item{debug}{(optionally) do you want to print out a limited amount of
debugging information about your code? - default FALSE}

\item{...}{(optionally) any other arguments for \code{step_function()},
e.g. parameters or timestep}
}
\value{
Data frame containing population history of simulation over time
}
\description{
A generic function to run a simulation loop for a fixed period of time.
This function can cope with model step functions that return an updated
data frame, or functions that return a list with an \code{end.experiment}
element and an \code{updated.pop} element. If the simulation isn't working
you can set \code{debug = TRUE} in the arguments, and it will print some
(potentially) useful debugging information while it runs. It will also
check whether your function has any global variables.
}
\examples{
df <- data.frame(time=0, count=1)
results <- run_simulation(RPiR.helper:::timestep_deterministic_growth,
                          df, end.time = 100, debug = TRUE,
                          growth.rate=0.1, timestep = 1)
plot_populations(results)

}
\seealso{
\code{\link{run_simple}} if you want a much simpler but more
restrictive version of the simulation code that may be useful for better
understanding how the function works.
}
